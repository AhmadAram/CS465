
.data

array:
	.space 48

.text 

array_init1:
	li $t0, 1
	la $a1, array
array_init2:
	sw $t0, 0($a1)
	#li $v0, 1
	#lw $a0, ($a1)
	#syscall
	addi $a1, $a1, 4
	addi $t0, $t0, 1
	bne $t0, 10, array_init2
	sw $zero, 0($a1)
	sw $zero, 4($a1)
	sw $zero, 8($a1)
	
	li $s0, 0	# counter for total numbers generated
	li $s1, 0	# counter to start anew after 7 digits
	
	la $a0, array
	la $a1, 48($a0)	# <- put into a register
	addi $a0, $a0, 8
	jal start
	li $v0, 1
	move $a0, $s0
	syscall
	li $v0, 10
	syscall
	
start:
	addi $sp, $sp, -8	# room for $ra and one temporary
        sw $ra, 4($sp)		# save $ra
	move $v0, $a0		# pre-load return value as n
	blt $a0, 2, return  	# if(n < 2) return n
	sw $a0, 0($sp) 		# save a copy of n
	addi $a0,$a0,-1 	# n - 1
	jal start			# fib(n-1)
	lw $a0, 0($sp) 		# retrieve n
	sw $v0, 0($sp) 		# save result of fib(n-1)
	addi $a0,$a0,-2 	# n - 2
	jal start		# fib(n-2)
        lw $v1, 0($sp)		# retrieve fib(n-1)
	add $v0,$v0,$v1 	#fib(n-1)+fib(n-2)
return: 
	lw $ra, 4($sp)		# restore $ra
        addi $sp, $sp, 8	# restore $sp
        jr $ra			# back to caller
