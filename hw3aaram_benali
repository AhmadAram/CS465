# Created by: Ahmad Aram and Nabil Adam Benali
# Course: CS 465-002
# Assignment: Homework 3
#
# Instruction Count: ????????????????
# Algorithm: Since the the user input is being interpreted as a string,
#   all the values are being compared against ascii codes. In our case,
#   the subroutine get_num will compare bases of each input value and
#   go to the proper base conversion label, or return to main_1 if base
#   was invaild. Each character is loaded from the input, compared if
#   it is null or '\0', then is subtracted by the first ascii value
#   that base can represent (octal range = 48 to 57, dec = 47 to 58,
#   hex letters = 97 to 102). After the value is obtained, the Sum of the number
#   is the number after the subtraction * original base + pre-subtraction value.
#   This process is continued for all the chars in the string for each value entered.

.globl get_num
.data
#below is the prompts in order of how they are presented to the user
prompt1: .asciiz "How many Values?"
prompt2: .asciiz "What is the Base?"
prompt3: .asciiz "what is the value?"
buffer: .space 20

#begin program
.text
#driver to get how many inputs 
	#prints prompt onto screen for user
	la $a0,prompt1
	li $v0,4
	syscall
	
	#receive user input and store the amount of values to be entered in $t9
	li $v0,5
	syscall 
	la $t9,($v0)	#store user input in $t9 this will be how many times we loop
# main loop to grab user input of base and value of number before passing to get_num	

main_1:
	#print second prompt to the user for what base the number should be
	la $a0,prompt2
	li $v0,4
	syscall
	
	#recieve user input of what base the number is in
	li $v0,5
	syscall
	la $t8,($v0) #store the base of the input to be used in get_num octal hex or decimal
	
	#prompt the user for the value of the input
	la $a0,prompt3
	li $v0,4
	syscall
	
	#retrieve input and store
	li $v0,8 #takes an input
	la $a0, buffer #load the byte space into the address
	li $a1,9 #make room for the string
	move $t7,$a0 #store the string in $t7
	syscall

	subi $t9,$t9,1 #subtract one since we just got our first input
	jal get_num	#jump to get_num which is to convert the string to the correct base and then to decimal
	add $t4,$t4,$t3 #adds the returning number into the overall sum
	#loop back if counter t9 is not equal to zero 
	bnez $t9,main_1
	j end #jump to end to terminate for now




#begin get num routine, will be called by main to convert valid argument to decimal
get_num:
	#check the base that was given by the user and convert that number by calling the respective function
	add $t3,$zero,$zero
	la $t1,($t7)
	beq $t8,10,dec
	beq $t8,8,octal
	beq $t8,16,hex
	add $t3,$t3,0 #store -1 into the sum as the base was invalid
	#will drop off to jr below and return to main
	
#jump back to the main_1 function to get the next input
return:
	jr $ra

#function to convert the number to decimal ie. just add it to the overall sum register
dec:
	#get starting adress of the string
	lb $t0,($t1) #load the byte from the calculated adress
	beq $t0,10,return # check if current byte is the newline character
	beq $t0,0,return #check if current byte is the null character
	subi $t0,$t0,48  #subtract 48 to obtain the decimal value of the number
	add $t3,$t3,$t0
	addi $t1,$t1,1
	lb $t0,($t1)
	beq $t0,10,return # check if current byte is the newline character
	beq $t0,0,return #check if current byte is the null character
	mul $t3,$t3,10
	j dec
	

octal:
		#get starting adress of the string
	lb $t0,($t1) #load the byte from the calculated adress
	beq $t0,10,return # check if current byte is the newline character
	beq $t0,0,return #check if current byte is the null character
	subi $t0,$t0,48  #subtract 48 to obtain the decimal value of the number
	add $t3,$t3,$t0
	addi $t1,$t1,1
	lb $t0,($t1)
	beq $t0,10,return # check if current byte is the newline character
	beq $t0,0,return #check if current byte is the null character
	mul $t3,$t3,8
	j octal
	
	

hex: 
	lb $t0,($t1)
	beq $t0,10,return
	beq $t0,0,return
	subi $t0,$t0,48
	bge $t0,10,letterhex
	add $t3,$t3,$t0
	addi $t1,$t1,1
	lb $t0,($t1)
	beq $t0,10,return
	beq $t0,0,return
	mul $t3,$t3,16
	j hex

#call to end the program once all inputs have been accounted for
end:
add $a0,$zero,$t4
li $v0,1
syscall
li $v0,10
syscall
	
letterhex: 
	sub $t0,$t0,39
	add $t3,$t3,$t0
	addi $t1,$t1,1
	lb $t0,($t1)
	beq $t0,10,return
	beq $t0,0,return
	mul $t3,$t3,16
	j hex
	
